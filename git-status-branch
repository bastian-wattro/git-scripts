#!/usr/bin/env python3

import subprocess
import sys
import argparse


def run_git_command(cmd):
    """Run a git command and return the output lines."""
    try:
        result = subprocess.run(
            cmd, shell=True, capture_output=True, text=True, check=True
        )
        return result.stdout.strip().split("\n") if result.stdout.strip() else []
    except subprocess.CalledProcessError:
        return []


def get_current_branch():
    """Get the current branch name."""
    try:
        result = subprocess.run(
            "git rev-parse --abbrev-ref HEAD",
            shell=True,
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return None


def extract_branch_name(branch_line):
    """Extract a clean branch name from the `git branch-vv ` output."""
    # Remove leading spaces and asterisk, get the first part before space
    clean_line = branch_line.strip().lstrip("* ").split()[0]
    return clean_line


def delete_branches(branches, force=False):
    """Delete the specified branches."""
    current_branch = get_current_branch()
    deleted_count = 0

    for branch_line in branches:
        branch_name = extract_branch_name(branch_line)

        # Skip the current branch
        if branch_name == current_branch:
            print(f"Skipping current branch: {branch_name}")
            continue

        # Delete branch
        delete_flag = "-D" if force else "-d"
        delete_cmd = f"git branch {delete_flag} {branch_name}"

        try:
            subprocess.run(delete_cmd, shell=True, check=True, capture_output=True)
            print(f"Deleted: {branch_name}")
            deleted_count += 1
        except subprocess.CalledProcessError as e:
            print(f"Failed to delete {branch_name}: {e}")

    return deleted_count


def get_branch_commit(branch_name):
    """Get the commit hash for a branch."""
    try:
        result = subprocess.run(
            f"git rev-parse {branch_name}",
            shell=True,
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return None


def find_duplicate_branches():
    """Find branches that point to the same commit."""
    # Get all local branches
    branch_lines = run_git_command("git branch")
    if not branch_lines:
        return {}

    # Extract branch names and get their commits
    branch_commits = {}
    for line in branch_lines:
        branch_name = line.strip().lstrip("* ")
        commit_hash = get_branch_commit(branch_name)
        if commit_hash:
            branch_commits[branch_name] = commit_hash

    # Group branches by commit hash
    commit_to_branches = {}
    for branch, commit in branch_commits.items():
        if commit not in commit_to_branches:
            commit_to_branches[commit] = []
        commit_to_branches[commit].append(branch)

    # Filter to only commits with multiple branches
    duplicates = {
        commit: branches
        for commit, branches in commit_to_branches.items()
        if len(branches) > 1
    }

    return duplicates


def main():
    parser = argparse.ArgumentParser(
        description="Show and optionally clean up Git branches"
    )
    parser.add_argument(
        "--delete-gone",
        action="store_true",
        help="Delete branches that are gone on origin",
    )
    parser.add_argument(
        "--delete-untracked",
        action="store_true",
        help="Delete branches that are not tracked (not pushed)",
    )
    parser.add_argument(
        "--no-force",
        action="store_true",
        help="Do not force delete branches (make sure they are merged locally)",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Show what would be deleted without actually deleting",
    )
    parser.add_argument(
        "--no-fetch",
        action="store_true",
        help="Show what would be deleted without actually deleting",
    )

    args = parser.parse_args()

    parser.print_help()

    if not args.no_fetch:
        try:
            subprocess.run(
                "git fetch --prune",
                shell=True,
                capture_output=True,
                text=True,
                check=True,
            )
        except subprocess.CalledProcessError:
            print("Failed to fetch from origin")
            sys.exit(1)

    # Get all branches with verbose info
    branches = run_git_command("git branch -vv")

    if not branches:
        print("No branches found or not in a git repository")
        sys.exit(1)

    # Find branches that are gone on origin
    gone_branches = [
        branch for branch in branches if "origin/" in branch and ": gone]" in branch
    ]

    # Find branches not pushed (don't contain "origin")
    not_pushed_branches = [branch for branch in branches if "origin" not in branch]

    # Display results
    print(">>> branch gone:")
    if gone_branches:
        for branch in gone_branches:
            print(branch)
        if not args.delete_gone:
            choice = input("Force delete all gone branches? [Yes|no]:  ")
            if not choice or choice.lower()[0] != "n":
                delete_branches(gone_branches, force=True)
    else:
        print("(none)")

    print(">>> branch not pushed:")
    if not_pushed_branches:
        for branch in not_pushed_branches:
            print(branch)
        if not args.delete_untracked:
            print(
                f"run again with --delete-untracked to delete {len(not_pushed_branches)} branches."
            )
    else:
        print("(none)")

    duplicates = find_duplicate_branches()
    print(">>> duplicate branches (same commit):")
    if duplicates:
        for commit, branch_list in duplicates.items():
            print(f"  {commit[:8]}: {', '.join(branch_list)}")
    else:
        print("(none)")

    # Handle deletion options
    if args.delete_gone and gone_branches:
        print("\n>>> Deleting gone branches:")
        if args.dry_run:
            print("DRY RUN - would delete:")
            for branch in gone_branches:
                branch_name = extract_branch_name(branch)
                print(f"  {branch_name}")
        else:
            deleted = delete_branches(gone_branches, not args.no_force)
            print(f"Deleted {deleted} gone branches")

    if args.delete_untracked and not_pushed_branches:
        print("\n>>> Deleting untracked branches:")
        if args.dry_run:
            print("DRY RUN - would delete:")
            for branch in not_pushed_branches:
                branch_name = extract_branch_name(branch)
                print(f"  {branch_name}")
        else:
            deleted = delete_branches(not_pushed_branches, not args.no_force)
            print(f"Deleted {deleted} untracked branches")


if __name__ == "__main__":
    main()
